# Updated Frontend ConfigMap with Architecture Page
apiVersion: v1
kind: ConfigMap
metadata:
  name: frontend-config
  namespace: kubereats
  labels:
    app: frontend
    version: v1.1.0
data:
  # Main application page with architecture link added
  index.html: |
    <!DOCTYPE html>
    <html lang="en">
    <head>
        <meta charset="UTF-8">
        <meta name="viewport" content="width=device-width, initial-scale=1.0">
        <title>KuberEats - Food Delivery</title>
        <style>
            * { margin: 0; padding: 0; box-sizing: border-box; }
            
            :root {
                --bg-primary: #f5f5f5;
                --bg-secondary: white;
                --text-primary: #2c3e50;
                --text-secondary: #7f8c8d;
                --header-bg: #2c3e50;
                --header-text: white;
                --card-shadow: 0 2px 8px rgba(0,0,0,0.1);
                --card-hover-shadow: 0 4px 16px rgba(0,0,0,0.15);
                --button-primary: #27ae60;
                --button-hover: #2ecc71;
                --accent: #e74c3c;
                --rating: #f39c12;
            }
            
            body.dark-mode {
                --bg-primary: #1a1a1a;
                --bg-secondary: #2d2d2d;
                --text-primary: #e0e0e0;
                --text-secondary: #b0b0b0;
                --header-bg: #111111;
                --header-text: #ffffff;
                --card-shadow: 0 2px 8px rgba(0,0,0,0.3);
                --card-hover-shadow: 0 4px 16px rgba(0,0,0,0.5);
            }
            
            body { 
                font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif; 
                background: var(--bg-primary);
                color: var(--text-primary);
                transition: background 0.3s, color 0.3s;
            }
            
            .header { 
                background: var(--header-bg); 
                color: var(--header-text); 
                padding: 1rem 2rem; 
                display: flex; 
                justify-content: space-between; 
                align-items: center;
                box-shadow: 0 2px 8px rgba(0,0,0,0.2);
            }
            
            .header-content {
                display: flex;
                align-items: center;
                gap: 1rem;
            }
            
            .header-links {
                display: flex;
                align-items: center;
                gap: 1.5rem;
            }
            
            .header-links a {
                color: var(--header-text);
                text-decoration: none;
                font-size: 0.9rem;
                transition: opacity 0.2s;
            }
            
            .header-links a:hover {
                opacity: 0.8;
            }
            
            .theme-toggle {
                background: none;
                border: 1px solid var(--header-text);
                color: var(--header-text);
                padding: 0.4rem 0.8rem;
                border-radius: 4px;
                cursor: pointer;
                font-size: 0.9rem;
                transition: all 0.2s;
            }
            
            .theme-toggle:hover {
                background: var(--header-text);
                color: var(--header-bg);
            }
            
            .container { max-width: 1200px; margin: 2rem auto; padding: 0 1rem; }
            .restaurant-grid { display: grid; grid-template-columns: repeat(auto-fill, minmax(300px, 1fr)); gap: 2rem; }
            .restaurant-card { 
                background: var(--bg-secondary); 
                border-radius: 8px; 
                box-shadow: var(--card-shadow); 
                overflow: hidden; 
                cursor: pointer; 
                transition: transform 0.2s, box-shadow 0.2s; 
            }
            .restaurant-card:hover { 
                transform: translateY(-4px); 
                box-shadow: var(--card-hover-shadow); 
            }
            .restaurant-header { background: #34495e; color: white; padding: 1rem; }
            .restaurant-body { padding: 1rem; }
            .rating { color: var(--rating); }
            .menu-modal { display: none; position: fixed; top: 0; left: 0; width: 100%; height: 100%; background: rgba(0,0,0,0.5); z-index: 1000; }
            .menu-content { 
                background: var(--bg-secondary); 
                margin: 5% auto; 
                width: 90%; 
                max-width: 600px; 
                max-height: 80vh; 
                overflow-y: auto; 
                border-radius: 8px; 
            }
            .menu-header { 
                background: #34495e; 
                color: white; 
                padding: 1rem; 
                display: flex; 
                justify-content: space-between; 
                align-items: center; 
            }
            .menu-item { 
                border-bottom: 1px solid var(--text-secondary); 
                padding: 1rem; 
                display: flex; 
                justify-content: space-between; 
                align-items: center; 
            }
            .menu-item:last-child { border-bottom: none; }
            .add-to-cart { 
                background: var(--button-primary); 
                color: white; 
                border: none; 
                padding: 0.5rem 1rem; 
                border-radius: 4px; 
                cursor: pointer; 
                transition: background 0.2s;
            }
            .add-to-cart:hover { background: var(--button-hover); }
            .cart { 
                position: fixed; 
                bottom: 2rem; 
                right: 2rem; 
                background: var(--accent); 
                color: white; 
                padding: 1rem 2rem; 
                border-radius: 50px; 
                box-shadow: 0 4px 16px rgba(0,0,0,0.2); 
                cursor: pointer; 
                transition: transform 0.2s;
            }
            .cart:hover { transform: scale(1.05); }
            .cart-count { 
                background: white; 
                color: var(--accent); 
                border-radius: 50%; 
                padding: 0.2rem 0.5rem; 
                margin-left: 0.5rem; 
            }
            .loading { text-align: center; padding: 2rem; }
            .error { 
                background: var(--accent); 
                color: white; 
                padding: 1rem; 
                border-radius: 4px; 
                margin: 1rem 0; 
            }
            .version-info { 
                position: fixed; 
                bottom: 10px; 
                left: 10px; 
                font-size: 10px; 
                color: var(--text-secondary); 
                opacity: 0.5; 
            }
            
            @media (max-width: 768px) {
                .header {
                    flex-direction: column;
                    gap: 1rem;
                    padding: 1rem;
                }
                .header-links {
                    flex-wrap: wrap;
                    justify-content: center;
                }
            }
        </style>
    </head>
    <body>
        <div class="header">
            <div class="header-content">
                <h1>üçï KuberEats</h1>
                <div>Delivering from Kubernetes to your door!</div>
            </div>
            <div class="header-links">
                <a href="/architecture.html">üìä Architecture</a>
                <button class="theme-toggle" onclick="toggleTheme()">üåì Theme</button>
            </div>
        </div>

        <div class="container">
            <h2>Available Restaurants</h2>
            <div id="restaurants" class="restaurant-grid">
                <div class="loading">Loading restaurants...</div>
            </div>
        </div>

        <div id="menuModal" class="menu-modal">
            <div class="menu-content">
                <div class="menu-header">
                    <h2 id="menuTitle">Menu</h2>
                    <button onclick="closeMenu()" style="background: none; border: none; color: white; font-size: 24px; cursor: pointer;">&times;</button>
                </div>
                <div id="menuItems"></div>
            </div>
        </div>

        <div class="cart" onclick="viewCart()">
            üõí Cart <span class="cart-count" id="cartCount">0</span>
        </div>

        <div class="version-info">v1.1.0</div>

        <script>
            const API_URL = '/api';
            const APP_VERSION = 'v1.1.0';
            let sessionId = localStorage.getItem('sessionId') || generateSessionId();
            let currentRestaurant = null;
            let cartItems = 0;

            // Theme management
            const currentTheme = localStorage.getItem('theme') || 'light';
            if (currentTheme === 'dark') {
                document.body.classList.add('dark-mode');
            }

            function toggleTheme() {
                document.body.classList.toggle('dark-mode');
                const theme = document.body.classList.contains('dark-mode') ? 'dark' : 'light';
                localStorage.setItem('theme', theme);
            }

            console.log(`KuberEats Frontend ${APP_VERSION}`);

            function generateSessionId() {
                const id = 'sess_' + Math.random().toString(36).substr(2, 9);
                localStorage.setItem('sessionId', id);
                return id;
            }

            async function loadRestaurants() {
                try {
                    const response = await fetch(`${API_URL}/restaurants`);
                    const restaurants = await response.json();
                    displayRestaurants(restaurants);
                } catch (error) {
                    document.getElementById('restaurants').innerHTML =
                        '<div class="error">Failed to load restaurants. Please try again.</div>';
                }
            }

            function displayRestaurants(restaurants) {
                const container = document.getElementById('restaurants');
                container.innerHTML = restaurants.map(restaurant => `
                    <div class="restaurant-card" onclick="showMenu(${restaurant.id}, '${restaurant.name}')">
                        <div class="restaurant-header">
                            <h3>${restaurant.name}</h3>
                            <div class="rating">‚òÖ ${restaurant.rating}</div>
                        </div>
                        <div class="restaurant-body">
                            <p>${restaurant.cuisine} Cuisine</p>
                            <p style="color: var(--text-secondary); margin-top: 0.5rem;">${restaurant.address}</p>
                        </div>
                    </div>
                `).join('');
            }

            async function showMenu(restaurantId, restaurantName) {
                currentRestaurant = { id: restaurantId, name: restaurantName };
                document.getElementById('menuTitle').textContent = restaurantName + ' Menu';
                document.getElementById('menuModal').style.display = 'block';

                try {
                    const response = await fetch(`${API_URL}/restaurants/${restaurantId}/menu`);
                    const menuItems = await response.json();
                    displayMenu(menuItems);
                } catch (error) {
                    document.getElementById('menuItems').innerHTML =
                        '<div class="error">Failed to load menu. Please try again.</div>';
                }
            }

            function displayMenu(items) {
                const container = document.getElementById('menuItems');
                container.innerHTML = items.map(item => `
                    <div class="menu-item">
                        <div>
                            <h4>${item.name}</h4>
                            <p style="color: var(--text-secondary); margin: 0.5rem 0;">${item.description}</p>
                            <p style="color: var(--button-primary); font-weight: bold;">$${item.price}</p>
                        </div>
                        <button class="add-to-cart" onclick="addToCart(${item.id}, '${item.name}', ${item.price})">
                            Add to Cart
                        </button>
                    </div>
                `).join('');
            }

            async function addToCart(itemId, itemName, price) {
                try {
                    const cartResponse = await fetch(`${API_URL}/cart`, {
                        method: 'POST',
                        headers: { 'Content-Type': 'application/json' },
                        body: JSON.stringify({ session_id: sessionId })
                    });
                    const cart = await cartResponse.json();

                    await fetch(`${API_URL}/cart/items`, {
                        method: 'POST',
                        headers: { 'Content-Type': 'application/json' },
                        body: JSON.stringify({
                            cart_id: cart.id,
                            menu_item_id: itemId,
                            quantity: 1
                        })
                    });

                    cartItems++;
                    document.getElementById('cartCount').textContent = cartItems;
                    alert(`Added ${itemName} to cart!`);
                } catch (error) {
                    alert('Failed to add item to cart. Please try again.');
                }
            }

            function closeMenu() {
                document.getElementById('menuModal').style.display = 'none';
            }

            async function viewCart() {
                try {
                    const response = await fetch(`${API_URL}/cart/${sessionId}`);
                    const cart = await response.json();

                    if (cart.items && cart.items.length > 0) {
                        const total = cart.items.reduce((sum, item) => sum + (item.price * item.quantity), 0);
                        alert(`Cart Total: $${total.toFixed(2)}\n\nItems:\n${cart.items.map(item =>
                            `${item.name} x${item.quantity} - $${(item.price * item.quantity).toFixed(2)}`
                        ).join('\n')}`);
                    } else {
                        alert('Your cart is empty!');
                    }
                } catch (error) {
                    alert('Failed to load cart. Please try again.');
                }
            }

            window.onclick = function(event) {
                const modal = document.getElementById('menuModal');
                if (event.target == modal) {
                    closeMenu();
                }
            }

            loadRestaurants();

            async function updateCartCount() {
                try {
                    const response = await fetch(`${API_URL}/cart/${sessionId}`);
                    const cart = await response.json();
                    cartItems = cart.items ? cart.items.length : 0;
                    document.getElementById('cartCount').textContent = cartItems;
                } catch (error) {
                    console.error('Failed to update cart count');
                }
            }
            updateCartCount();
        </script>
    </body>
    </html>

  # New architecture page
  architecture.html: |
    <!DOCTYPE html>
    <html lang="en">
    <head>
        <meta charset="UTF-8">
        <meta name="viewport" content="width=device-width, initial-scale=1.0">
        <title>KuberEats - System Architecture</title>
        <style>
            * { margin: 0; padding: 0; box-sizing: border-box; }
            
            :root {
                --bg-color: #f5f5f5;
                --text-color: #2c3e50;
                --header-bg: #2c3e50;
                --header-text: white;
                --card-bg: white;
                --border-color: #ddd;
                --link-color: #3498db;
                --link-hover: #2980b9;
            }
            
            body.dark-mode {
                --bg-color: #1a1a1a;
                --text-color: #e0e0e0;
                --header-bg: #111111;
                --header-text: #ffffff;
                --card-bg: #2a2a2a;
                --border-color: #444;
                --link-color: #64b5f6;
                --link-hover: #90caf9;
            }
            
            body {
                font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
                background: var(--bg-color);
                color: var(--text-color);
                transition: background 0.3s, color 0.3s;
            }
            
            .header {
                background: var(--header-bg);
                color: var(--header-text);
                padding: 1rem 2rem;
                display: flex;
                justify-content: space-between;
                align-items: center;
                box-shadow: 0 2px 8px rgba(0,0,0,0.1);
            }
            
            .header h1 {
                font-size: 1.5rem;
            }
            
            .nav-links {
                display: flex;
                gap: 2rem;
                align-items: center;
            }
            
            .nav-links a {
                color: var(--header-text);
                text-decoration: none;
                font-size: 0.9rem;
                transition: opacity 0.2s;
            }
            
            .nav-links a:hover {
                opacity: 0.8;
            }
            
            .theme-toggle {
                background: none;
                border: 1px solid var(--header-text);
                color: var(--header-text);
                padding: 0.5rem 1rem;
                border-radius: 4px;
                cursor: pointer;
                font-size: 0.9rem;
                transition: all 0.2s;
            }
            
            .theme-toggle:hover {
                background: var(--header-text);
                color: var(--header-bg);
            }
            
            .container {
                max-width: 1400px;
                margin: 2rem auto;
                padding: 0 1rem;
            }
            
            .intro-section {
                background: var(--card-bg);
                padding: 2rem;
                border-radius: 8px;
                box-shadow: 0 2px 8px rgba(0,0,0,0.1);
                margin-bottom: 2rem;
            }
            
            .intro-section h2 {
                color: var(--text-color);
                margin-bottom: 1rem;
            }
            
            .intro-section p {
                line-height: 1.6;
                margin-bottom: 0.5rem;
            }
            
            .architecture-diagram {
                background: var(--card-bg);
                padding: 2rem;
                border-radius: 8px;
                box-shadow: 0 2px 8px rgba(0,0,0,0.1);
                margin-bottom: 2rem;
                overflow-x: auto;
            }
            
            .architecture-diagram h2 {
                margin-bottom: 1.5rem;
                text-align: center;
            }
            
            .svg-container {
                display: flex;
                justify-content: center;
                min-height: 600px;
            }
            
            .architecture-diagram svg {
                max-width: 100%;
                height: auto;
            }
            
            .components-grid {
                display: grid;
                grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
                gap: 1.5rem;
                margin-top: 2rem;
            }
            
            .component-card {
                background: var(--card-bg);
                border: 1px solid var(--border-color);
                border-radius: 8px;
                padding: 1.5rem;
                transition: transform 0.2s, box-shadow 0.2s;
            }
            
            .component-card:hover {
                transform: translateY(-2px);
                box-shadow: 0 4px 12px rgba(0,0,0,0.15);
            }
            
            .component-card h3 {
                color: var(--link-color);
                margin-bottom: 0.75rem;
            }
            
            .component-card ul {
                list-style: none;
                padding-left: 0;
            }
            
            .component-card li {
                padding: 0.25rem 0;
                font-size: 0.9rem;
            }
            
            .component-card li:before {
                content: "‚Ä¢ ";
                color: var(--link-color);
                font-weight: bold;
                margin-right: 0.5rem;
            }
            
            .tech-stack {
                display: flex;
                flex-wrap: wrap;
                gap: 0.5rem;
                margin-top: 0.75rem;
            }
            
            .tech-badge {
                background: var(--link-color);
                color: white;
                padding: 0.25rem 0.75rem;
                border-radius: 20px;
                font-size: 0.8rem;
            }
            
            .back-link {
                display: inline-flex;
                align-items: center;
                color: var(--link-color);
                text-decoration: none;
                margin-bottom: 1rem;
                transition: color 0.2s;
            }
            
            .back-link:hover {
                color: var(--link-hover);
            }
            
            .version-info {
                position: fixed;
                bottom: 10px;
                right: 10px;
                font-size: 10px;
                color: #999;
                opacity: 0.5;
            }
            
            body.dark-mode .architecture-svg {
                filter: invert(1) hue-rotate(180deg);
            }
            
            @media (max-width: 768px) {
                .header {
                    flex-direction: column;
                    gap: 1rem;
                }
                
                .nav-links {
                    flex-wrap: wrap;
                    justify-content: center;
                }
            }
        </style>
    </head>
    <body>
        <div class="header">
            <h1>üçï KuberEats Architecture</h1>
            <div class="nav-links">
                <a href="/">‚Üê Back to App</a>
                <a href="#overview">Overview</a>
                <a href="#components">Components</a>
                <button class="theme-toggle" onclick="toggleTheme()">üåì Toggle Theme</button>
            </div>
        </div>

        <div class="container">
            <div class="intro-section" id="overview">
                <h2>System Architecture Overview</h2>
                <p>KuberEats is a cloud-native food delivery platform built on Kubernetes. The application follows a microservices architecture with three main tiers:</p>
                <ul style="margin-left: 2rem; margin-top: 1rem;">
                    <li><strong>Frontend Layer:</strong> Nginx-based web interface serving a single-page application</li>
                    <li><strong>Backend API Layer:</strong> Node.js/Express.js RESTful API handling business logic</li>
                    <li><strong>Database Layer:</strong> PostgreSQL for persistent data storage</li>
                </ul>
                <p style="margin-top: 1rem;">All components run in the <code>kubereats</code> namespace and leverage Kubernetes features like health probes, resource limits, and persistent storage.</p>
            </div>

            <div class="architecture-diagram">
                <h2>Complete System Architecture</h2>
                <div class="svg-container">
                    <svg viewBox="0 0 1000 800" xmlns="http://www.w3.org/2000/svg" class="architecture-svg">
                        <rect width="1000" height="800" fill="#f8f9fa"/>
                        
                        <text x="500" y="30" text-anchor="middle" font-size="24" font-weight="bold">KuberEats Architecture</text>
                        
                        <rect x="400" y="60" width="200" height="60" fill="#e3f2fd" stroke="#1976d2" stroke-width="2" rx="8"/>
                        <text x="500" y="95" text-anchor="middle" font-size="14" font-weight="bold">User Browser</text>
                        
                        <line x1="500" y1="120" x2="500" y2="150" stroke="#4CAF50" stroke-width="2" marker-end="url(#arrowhead)"/>
                        
                        <rect x="50" y="160" width="900" height="600" fill="none" stroke="#666" stroke-width="2" stroke-dasharray="8,4" rx="10"/>
                        <text x="70" y="185" font-size="16" fill="#666">Kubernetes Cluster (kubereats namespace)</text>
                        
                        <rect x="100" y="210" width="800" height="150" fill="#e8f5e9" stroke="#4caf50" stroke-width="2" rx="8"/>
                        <text x="500" y="235" text-anchor="middle" font-size="18" font-weight="bold">Frontend Layer</text>
                        <rect x="150" y="250" width="300" height="90" fill="#66bb6a" rx="5"/>
                        <text x="300" y="275" text-anchor="middle" font-size="14" fill="white">LoadBalancer Service</text>
                        <text x="300" y="295" text-anchor="middle" font-size="12" fill="white">2x nginx:alpine pods</text>
                        <text x="300" y="315" text-anchor="middle" font-size="11" fill="white">HTML/CSS/JS (ConfigMap)</text>
                        
                        <rect x="550" y="250" width="300" height="90" fill="#66bb6a" rx="5"/>
                        <text x="700" y="280" text-anchor="middle" font-size="12" fill="white">Resource Limits:</text>
                        <text x="700" y="300" text-anchor="middle" font-size="11" fill="white">CPU: 50m-100m</text>
                        <text x="700" y="320" text-anchor="middle" font-size="11" fill="white">Memory: 64Mi-128Mi</text>
                        
                        <line x1="500" y1="360" x2="500" y2="390" stroke="#4CAF50" stroke-width="2" marker-end="url(#arrowhead)"/>
                        
                        <rect x="100" y="400" width="800" height="150" fill="#fff3e0" stroke="#ff9800" stroke-width="2" rx="8"/>
                        <text x="500" y="425" text-anchor="middle" font-size="18" font-weight="bold">Backend API Layer</text>
                        <rect x="150" y="440" width="300" height="90" fill="#ffa726" rx="5"/>
                        <text x="300" y="465" text-anchor="middle" font-size="14" fill="white">ClusterIP Service</text>
                        <text x="300" y="485" text-anchor="middle" font-size="12" fill="white">2x node:18-alpine pods</text>
                        <text x="300" y="505" text-anchor="middle" font-size="11" fill="white">Express.js REST API</text>
                        
                        <rect x="550" y="440" width="300" height="90" fill="#ffa726" rx="5"/>
                        <text x="700" y="470" text-anchor="middle" font-size="12" fill="white">Resource Limits:</text>
                        <text x="700" y="490" text-anchor="middle" font-size="11" fill="white">CPU: 200m-500m</text>
                        <text x="700" y="510" text-anchor="middle" font-size="11" fill="white">Memory: 256Mi-512Mi</text>
                        
                        <line x1="500" y1="550" x2="500" y2="580" stroke="#4CAF50" stroke-width="2" marker-end="url(#arrowhead)"/>
                        
                        <rect x="100" y="590" width="800" height="150" fill="#e3f2fd" stroke="#1976d2" stroke-width="2" rx="8"/>
                        <text x="500" y="615" text-anchor="middle" font-size="18" font-weight="bold">Database Layer</text>
                        <rect x="150" y="630" width="300" height="90" fill="#42a5f5" rx="5"/>
                        <text x="300" y="655" text-anchor="middle" font-size="14" fill="white">PostgreSQL StatefulSet</text>
                        <text x="300" y="675" text-anchor="middle" font-size="12" fill="white">1x postgres:15-alpine</text>
                        <text x="300" y="695" text-anchor="middle" font-size="11" fill="white">20GB Persistent Volume</text>
                        
                        <rect x="550" y="630" width="300" height="90" fill="#42a5f5" rx="5"/>
                        <text x="700" y="655" text-anchor="middle" font-size="12" fill="white">Backup CronJob</text>
                        <text x="700" y="675" text-anchor="middle" font-size="11" fill="white">Daily at 2 AM</text>
                        <text x="700" y="695" text-anchor="middle" font-size="11" fill="white">7-day retention</text>
                        
                        <defs>
                            <marker id="arrowhead" markerWidth="10" markerHeight="7" refX="9" refY="3.5" orient="auto">
                                <polygon points="0 0, 10 3.5, 0 7" fill="#4CAF50"/>
                            </marker>
                        </defs>
                    </svg>
                </div>
            </div>

            <div id="components">
                <h2 style="margin-bottom: 1.5rem;">Component Details</h2>
                <div class="components-grid">
                    <div class="component-card">
                        <h3>üåê Frontend Service</h3>
                        <ul>
                            <li>LoadBalancer type for external access</li>
                            <li>2 replicas for high availability</li>
                            <li>Nginx reverse proxy to backend API</li>
                            <li>Single-page application (vanilla JS)</li>
                            <li>Health checks on /health endpoint</li>
                        </ul>
                        <div class="tech-stack">
                            <span class="tech-badge">nginx:alpine</span>
                            <span class="tech-badge">HTML/CSS/JS</span>
                        </div>
                    </div>

                    <div class="component-card">
                        <h3>‚öôÔ∏è Backend API</h3>
                        <ul>
                            <li>RESTful API with Express.js</li>
                            <li>ClusterIP service (internal only)</li>
                            <li>Database connection with retry logic</li>
                            <li>Environment variables from K8s secrets</li>
                            <li>Horizontal scaling with 2 replicas</li>
                        </ul>
                        <div class="tech-stack">
                            <span class="tech-badge">node:18-alpine</span>
                            <span class="tech-badge">Express.js</span>
                            <span class="tech-badge">PostgreSQL driver</span>
                        </div>
                    </div>

                    <div class="component-card">
                        <h3>üóÑÔ∏è Database</h3>
                        <ul>
                            <li>PostgreSQL 15 with Alpine Linux</li>
                            <li>StatefulSet for stable identity</li>
                            <li>Persistent volume claim (20GB)</li>
                            <li>Automated nightly backups</li>
                            <li>Init script for schema setup</li>
                        </ul>
                        <div class="tech-stack">
                            <span class="tech-badge">postgres:15-alpine</span>
                            <span class="tech-badge">Nutanix Storage</span>
                        </div>
                    </div>

                    <div class="component-card">
                        <h3>üîê Configuration</h3>
                        <ul>
                            <li>ConfigMaps for frontend files</li>
                            <li>Secrets for database credentials</li>
                            <li>Resource quotas and limits</li>
                            <li>Liveness and readiness probes</li>
                            <li>Namespace isolation</li>
                        </ul>
                        <div class="tech-stack">
                            <span class="tech-badge">ConfigMaps</span>
                            <span class="tech-badge">Secrets</span>
                            <span class="tech-badge">RBAC</span>
                        </div>
                    </div>

                    <div class="component-card">
                        <h3>üìä Monitoring</h3>
                        <ul>
                            <li>Health endpoints on all services</li>
                            <li>Kubernetes probe configuration</li>
                            <li>Automatic pod restarts on failure</li>
                            <li>Service mesh ready architecture</li>
                            <li>Resource usage tracking</li>
                        </ul>
                        <div class="tech-stack">
                            <span class="tech-badge">Health Probes</span>
                            <span class="tech-badge">Metrics</span>
                        </div>
                    </div>

                    <div class="component-card">
                        <h3>üöÄ Deployment</h3>
                        <ul>
                            <li>Declarative YAML manifests</li>
                            <li>Rolling update strategy</li>
                            <li>Version controlled configs</li>
                            <li>Multi-environment support</li>
                            <li>GitOps ready</li>
                        </ul>
                        <div class="tech-stack">
                            <span class="tech-badge">Kubernetes</span>
                            <span class="tech-badge">Helm Ready</span>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <div class="version-info">Architecture v1.0.0</div>

        <script>
            const currentTheme = localStorage.getItem('theme') || 'light';
            if (currentTheme === 'dark') {
                document.body.classList.add('dark-mode');
            }

            function toggleTheme() {
                document.body.classList.toggle('dark-mode');
                const theme = document.body.classList.contains('dark-mode') ? 'dark' : 'light';
                localStorage.setItem('theme', theme);
            }

            window.addEventListener('storage', (e) => {
                if (e.key === 'theme') {
                    if (e.newValue === 'dark') {
                        document.body.classList.add('dark-mode');
                    } else {
                        document.body.classList.remove('dark-mode');
                    }
                }
            });
        </script>
    </body>
    </html>

  # Updated nginx.conf to serve both pages
  nginx.conf: |
    server {
        listen 80;
        server_name _;

        location / {
            root /usr/share/nginx/html;
            try_files $uri /index.html;
        }

        location /api/ {
            proxy_pass http://backend-api:3000/api/;
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection 'upgrade';
            proxy_set_header Host $host;
            proxy_cache_bypass $http_upgrade;
        }

        location /health {
            return 200 'healthy\n';
        }

        location /version {
            return 200 'v1.1.0\n';
        }
    }