# PostgreSQL ConfigMap for initialization
apiVersion: v1
kind: ConfigMap
metadata:
  name: postgres-init
  namespace: kubereats
data:
  init.sql: |
    -- Create KuberEats database schema
    CREATE TABLE IF NOT EXISTS restaurants (
        id SERIAL PRIMARY KEY,
        name VARCHAR(255) NOT NULL,
        cuisine VARCHAR(100),
        address TEXT,
        rating DECIMAL(2,1),
        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
    );

    CREATE TABLE IF NOT EXISTS menu_items (
        id SERIAL PRIMARY KEY,
        restaurant_id INTEGER REFERENCES restaurants(id),
        name VARCHAR(255) NOT NULL,
        description TEXT,
        price DECIMAL(10,2),
        category VARCHAR(100),
        available BOOLEAN DEFAULT true
    );

    CREATE TABLE IF NOT EXISTS carts (
        id SERIAL PRIMARY KEY,
        session_id VARCHAR(255) UNIQUE NOT NULL,
        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
        updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
    );

    CREATE TABLE IF NOT EXISTS cart_items (
        id SERIAL PRIMARY KEY,
        cart_id INTEGER REFERENCES carts(id),
        menu_item_id INTEGER REFERENCES menu_items(id),
        quantity INTEGER DEFAULT 1,
        special_instructions TEXT
    );

    -- Insert sample data
    INSERT INTO restaurants (name, cuisine, address, rating) VALUES
    ('The Pasta Palace', 'Italian', '123 Main St, Lexington, KY', 4.5),
    ('Burger Barn', 'American', '456 Oak Ave, Lexington, KY', 4.2),
    ('Sushi Supreme', 'Japanese', '789 Elm St, Lexington, KY', 4.8);

    INSERT INTO menu_items (restaurant_id, name, description, price, category) VALUES
    (1, 'Spaghetti Carbonara', 'Classic Roman pasta with eggs, cheese, and pancetta', 14.99, 'Pasta'),
    (1, 'Margherita Pizza', 'Fresh mozzarella, tomatoes, and basil', 12.99, 'Pizza'),
    (2, 'Classic Cheeseburger', 'Angus beef with cheddar, lettuce, tomato', 10.99, 'Burgers'),
    (2, 'Crispy Fries', 'Hand-cut fries with sea salt', 3.99, 'Sides'),
    (3, 'California Roll', 'Crab, avocado, and cucumber', 8.99, 'Rolls'),
    (3, 'Salmon Sashimi', 'Fresh Atlantic salmon (5 pieces)', 12.99, 'Sashimi');

---
# PostgreSQL PVC using Nutanix
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: postgres-pvc
  namespace: kubereats
spec:
  accessModes:
    - ReadWriteOnce
  storageClassName: nutanix-volume
  resources:
    requests:
      storage: 20Gi

---
# PostgreSQL StatefulSet
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: postgres
  namespace: kubereats
spec:
  serviceName: postgres
  replicas: 1
  selector:
    matchLabels:
      app: postgres
  template:
    metadata:
      labels:
        app: postgres
        version: v1
    spec:
      containers:
      - name: postgres
        image: postgres:15-alpine
        ports:
        - containerPort: 5432
          name: postgres
        envFrom:
        - secretRef:
            name: postgres-secret
        resources:
          requests:
            memory: "256Mi"
            cpu: "250m"
          limits:
            memory: "512Mi"
            cpu: "500m"
        volumeMounts:
        - name: postgres-storage
          mountPath: /var/lib/postgresql/data
          subPath: postgres
        - name: init-script
          mountPath: /docker-entrypoint-initdb.d
        livenessProbe:
          exec:
            command:
              - pg_isready
              - -U
              - kubereats
          initialDelaySeconds: 30
          periodSeconds: 10
        readinessProbe:
          exec:
            command:
              - pg_isready
              - -U
              - kubereats
          initialDelaySeconds: 5
          periodSeconds: 5
      volumes:
      - name: postgres-storage
        persistentVolumeClaim:
          claimName: postgres-pvc
      - name: init-script
        configMap:
          name: postgres-init

---
# PostgreSQL Service
apiVersion: v1
kind: Service
metadata:
  name: postgres
  namespace: kubereats
  labels:
    app: postgres
spec:
  type: ClusterIP
  ports:
  - port: 5432
    targetPort: 5432
    protocol: TCP
  selector:
    app: postgres

---
# PostgreSQL Backup CronJob (Optional but recommended)
apiVersion: batch/v1
kind: CronJob
metadata:
  name: postgres-backup
  namespace: kubereats
spec:
  schedule: "0 2 * * *"  # Daily at 2 AM
  jobTemplate:
    spec:
      template:
        spec:
          containers:
          - name: postgres-backup
            image: postgres:15-alpine
            envFrom:
            - secretRef:
                name: postgres-secret
            command:
            - sh
            - -c
            - |
              DATE=$(date +%Y%m%d_%H%M%S)
              pg_dump -h postgres -U $POSTGRES_USER $POSTGRES_DB > /backup/kubereats_$DATE.sql
              # Keep only last 7 days of backups
              find /backup -name "kubereats_*.sql" -mtime +7 -delete
            volumeMounts:
            - name: backup
              mountPath: /backup
          restartPolicy: OnFailure
          volumes:
          - name: backup
            persistentVolumeClaim:
              claimName: postgres-backup-pvc

---
# Backup PVC (Optional)
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: postgres-backup-pvc
  namespace: kubereats
spec:
  accessModes:
    - ReadWriteOnce
  storageClassName: nutanix-volume
  resources:
    requests:
      storage: 10Gi